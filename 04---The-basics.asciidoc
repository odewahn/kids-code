== First, some basics

Now that we have Python installed and IDLE up and running, let's get Python to do some things! In this chapter, we're going to learn how to work with numbers and text, do some basic math, and store values so we can use them later.

=== Notes for the grown-up

=== What you need for this chapter

For this chapter, you'll need IDLE up and running. That's it! In future chapters, I might use this space to warn you that we're going to use a concept that we went over earlier. If you're feeling uncertain about anything I mention, do yourself a favor and go do a quick review of that topic before trying out that lesson or project.

=== Let's do some math

Some of the first 'computers' created were made to do math. As long as the human race has been adding one and one, we've been on the hunt for a way to do math so it's easier and more reliable. We came up with new ways of lining up numbers, different annotations, and eventually, we created machines to do the math for us.

Let's get Python to do some math for us! Open up your IDLE interpreter and type in the following:

[source,python]
----
>>> 5 + 5
>>> 6 - 7
>>> 1.2 + 5.9 - 2.3
----

Every time you hit enter, Python should spit the answer back out at you. This is what your intepreter screen should look like.

[source,python]
----
>>> 5 + 5
10
>>> 6 - 7
-2
>>> 1.2 + 5.2
6.4
----

So far, the math in Python looks very similar to the math you do every day. There are a few operators that are different, though, so let's review the ones you're most likely to use.

NOTE: An operator is a symbol like the plus sign (+) or minus sign (-) that let's us tell others what we want to do to two values.

==== The rest of the operators

For the most part, Python uses operators that are pretty familiar to us. Sometimes, though, they've had to use something different. Table X.X shows a list of the operators, what it looks like when you write them out, and what symbol you should use in Python.

.Opeators in Python
|===
|Math operation |Operator when written |Operator in Python |Example

|Addition
| +
| +
| 3 + 3

|Subtraction
| -
| -
| 3 - 3

|Multiplication
| x or a dot (ใป)
| *
| 3 * 3

|Division
| รท
| /
| 3 / 3

|Powers
| Superscript (1^1^)
| ^ (It's above the six)
| 3 ^ 3

There are more operators than these, but just knowing these will still allow you do to quite a bit. If you want to check out other operators, check out Table X.X in the Extra Materials section for a complete listing.

==== Types of numbers

There's more than one kind of number in Python. In school, you probably learned about decimal numbers and whole numbers. In Python, a decimal number is called a *float*, while a whole number is called an *integer*. 

If a number has a decimal point, it's a float. It might have a bunch of numbers after the decimal point (1.3243432532), or it might have a zero (5.0). In any case, however, it's a float.

If a number has no decimal point, it's considered a integer. Even if it's super long (1000000000), it's still considered an integer.

Why do we have two kinds of numbers? Because one is more precise than another. Let's look at a case when this matters. Let's divide one by two. What would you normally expect?

TODO: Active console here

[source,python]
----
>>> 1 / 2
----

When you ran the code, you got zero, didn't you? That's not right! You should have gotten 0.5! What's going on here?

Because you used two integers, Python assumed you wanted an integer back, so it lopped off everything after the decimal point. Computers are very careful to be only as precise as you ask them to be, because precision takes energy. If Python always assumed you wanted to be super precise, your programs would run much more slowly?

So, what do we do if we want precision? Make sure at least one of the numbers in your statement is a decimal. Then, Python will know you want a decimal back! Try changing one of the numbers here to a decimal point so you get 0.5 back instead of 0.

TODO: Active console here

[source,python]
----
>>> 1 / 2
----

=== Storing information

Doing math is all well and good, but if we're going to make a useful program, we're going to have to store information so we can use it over and over, or so we can change a value as time goes on. To do that, we're going to need to create a variable.

==== Rules about naming variables

=== Storing text

==== Printing text

==== Doing math?

=== Comparing values

=== Let's play with turtles!

==== How to get turtles started

==== Moving the turtle

==== Turning the turtle

==== Stamping and pens

=== Try this!

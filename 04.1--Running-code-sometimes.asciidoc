== Running code sometimes

There are going to be times when you'll want to run some code _only_ if something is true. Maybe you'll want to print out a different message whether someone won or lost a game, or you might want to let a user choose an item from a menu.

If we didn't have the ability to choose whether or not to run some code, our programs wouldn't be very flexible. They wouldn't be able to deal with bad input, and they might only be able to do one thing.

=== Notes for the grown-up

=== What you need to know...

You should have a good handle on text and numbers. If you don't know what a float, integer, or string is, go read the last chapter again, or watch the quick review video.

=== Boolean: True and False

In order to decide if you need to do something, you need to decide if a statement is true or not. If a statement is correct, then Python will return True. If it isn't, Python will return False.

True and False are special values in Python called Boolean. Unlike strings and floats and integers, a Boolean can only be True or False. 

Notice that True and False are capitalized. That's important! That's how you know that Python is talking about a Boolean value. Try running the following code:

[source,python]
----
print True
print true
----

The first line worked fine, but the second line got an error, didn't it? That's because True is a proper boolean, but Python doesn't know what to do with a true that's lower case.

==== Comparing values

We often get boolean values by comparing one or more items to each other. Sometimes, we want to see if two things are equal, while other times, we want to see if one is greater or smaller than the other.

To test if something is equal to another thing, we use two equals signs (==) between the two values. Try the following statements out, and see what Python spits out:

[source,python]
----
>>> 2 == 2
>>> 2 == 3
>>> "Ahmed" == "Ahmed"
>>> "Dominique" == "dominique"
----

With each statement, Python returned either True or False. Notice that Python was super picky about things being equal. The two strings "Dominique" and "dominique" were _close_, but they weren't exactly alike. Python will only return true if the two items are _exactly the same_.

You can also test for inequality, or two things _not_ being alike. To do this, you use an exclamation point and an equal sign (!=). Try the following statements:

[source,python]
----
>>> 2 != 2
>>> 2 != 3
>>> "Ahmed" != "Ahmed"
>>> "Dominique" != "dominique"
----

Compare that to the last bit of code. The results were the exact opposite! Once again, Python is super picky. If two things are even slightly different, then Python will return True when you ask it about inequality. Otherwise, it will return False.

You can also test to see if something is greater than or less than something else. To do this, you use the greater than (>) or less than (<) sign. Try out the following statements:

[source,python]
----
>>> 2 > 3
>>> 2 < 3
>>> 2 > 2
>>> 2 < 2
----

We can also check to see if an item is greater/less than _or equal to_ another item. In math class, you might have used a special symbol ([\>=\]) to do equations where you were worried about something being greater than or equal to another item (or vice versa). You don't have that symbol on your keyboard, though, so instead, we just use the greater than / less than sign paired with an equal sign:


[source,python]
----
>>> 2 >= 3
>>> 2 <= 3
>>> 2 >= 2
>>> 2 <= 2
----

==== Testing multiple things

Sometimes, you want to see if more than one thing is true. This is when using the `and` and `or` operators come in handy.

Using `and` is pretty easy. You can use `and` to string together several expressions, and if all of them are true, Python will return True. If even one is false, though, Python will return False.

Run the following code, and pay attention to what you're asking Python. Which expression is True, and which is False?

[source,python]
----
1 == 1 and 2 == 2
2 > 3 and 3 < 4
4 !=5 and 6 != 6
5 > 6 and 6 > 7
----

The `or` operator can be used to string together a series of expressions where you only care if _one_ of the expressions is true. So, even if you've strung together 100 expressions (please don't do that), if just one out of the 99 is true, Python will return True.

Here, the same expressions as the last exercise have been joined together using `or`. Check out what Python returns this time.

[source,python]
----
1 == 1 and 2 == 2
2 > 3 and 3 < 4
4 !=5 and 6 != 6
5 > 6 or 6 > 7
----

=== Using if statements

Now that we know how to tell if a expression is true or not, let's learn how to run code only _if_ that expression is true! To do that, we'll create an `if` statement.

Here's what a basic if statment looks like:

[source,python]
----
if expression:
    code
    code
    code
----

If the expression in the `if` statement is true, then the indented code beneath the `if` will run. Otherwise, Python will skip over that code. That indented code is called a *block*.

==== What's a block?

In Python, you use blocks quite a bit. It's how we tell Python that a bit of code should run differently. We might want it only to run if something is true, or we might want it to run multiple times. 

You create a block by putting four spaces before your code. If you're working in IDLE, Python should put that space there for you. If you ever happen to work in an editor that doesn't put that space in there for you, you'll have to do it yourself.

Let's play around with an `if` statement. First, run the code and note what happens. Then, try to change the code so that the code under the `if` statment runs.

[source,python]
----
name = "Jay"
if name == "Kareem":
    print "Hey, buddy!"
print "How are you today?"
----

There are a few ways you could make it so "Hey, buddy!" prints out. You could change `name` to "Kareem", or you could change the `if` expression to `name == "Jay"`.

==== Adding in else

Sometimes, you want to run some code if something is true, and run some _other_ code if that thing is false. In that case, we want to add an `else` to our `if` statment.

Here is what a basic `if` statment with an `else` clause looks like:

[source,python]
----
donuts = 3
if donuts < 5:
    print "That's a bunch of donuts"
else:
    print "You're running low on donuts."
----

Run the code and note what happens. We have five donuts, so `donuts > 3` is false. Therefore, the code under the `else` clause is run. Python prints out "You're running low on donuts."

NOTE: Note that the else clause has a block of code, too! Each clause for an `if` statement needs its own block to run!

==== elif: Doing many things!



=== Try this!

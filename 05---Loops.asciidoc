== Loops

So far, we've learned how to store information, make Python do what we want, and have Python run certain bits of code only if something is true. Now, it's time to have Python repeat code!

=== What you need to know...

You should have a good handle on Boolean expressions! If you're not sure about them, go back read over that section, or check out the review video.

=== Notes for the grown-up

In this lesson, we're going to be going over loops. Once again, you might have to spend some extra time emphasizing the importance of code blocks and indentation in Python. You also might want to emphasize when you use one type of loop over another type of loop.

For loops often present a special kind of challenge for many students. It might take a few tries for them to understand what a loop variable is. You might notice that were not teaching lists in this lesson. Going to start off by simply using range. If a student seems rather precocious, you might want to give them a brief overview of what a list is. If you need some help with that, check out the review video in the lists chapter.

Be careful not to overwhelm the student. If they're just getting used to the idea of loops then go ahead and leave lists for later.

As for range, younger students may need help with understanding steps when it comes to playing with range. If they seem confused don't be shy about moving on. I can count on one hand the number of times I've had to give range more than two parameters. You and you and your and you and you and you and you and and you and you and you and you and you and you and I know that your's is here in a you as you and you and you know my son and in a you know what is sleeping one is a you you is was Michael Cooley high as you as Lori will is will

=== Why use a loop?

If we didn't use loops to repeat code, then our code would be super long. If we wanted to do something five times, we'd have to have the same code, repeated five times. Maybe we would want to do something until something happened. How would we do that without loops? We would have to guess when something might happen, and repeat the code that many times!

==== Types of loops

There are two kinds of loops: conditional loops and counting loops. 

*Conditional loops* run until something happens. Maybe the user chooses to quit the program, or maybe the player slays the dragon. Maybe the dragon slays the player! Whatever the event, once it happens, the loop ends, and the program moves on.

*Counting loops* run a certain number of times. You might want to run a block of code five times (or a hundred times!). For example, you may want to give a player a certain number of tries to guess a number. After their guesses are used up, you can tell them that they lost.

=== Counting loops (for)

Let's start with counting loops. In Python, we call these `for` loops. They look like this:

[source,python]
----
for num in range(nums):
   code
   code
   code
----

`nums` is the number of times you want the loop to run. So, if you want to run the code block five times, you would say `range(5)`. 

`num` is the *loop variable*. Every time the loop runs, it's going to store a new value. Let's look at the following code. Run it and note what is printed out.

[source,python]
----
for num in range(10):
    print num
----

Python printed out the numbers zero through nine! Let's talk a bit more about what `range()` does.

==== Range

`range()` has one job: It has to give you a list of numbers. Try out the following code:

[source,python]
----
print range(5)
----

If you give `range()` just one number, then Python will give you a list of numbers, from zero to _one less_ than that number. Change the code above so that you get a list of numbers from zero to one hundred!

What if you don't want to start at zero? Easy! You can give `range()` two numbers. The first is where Python starts, and the second number is where Python will stop. Note, though, that Python still stops _one less_ than that number. Try this code:

[source,python]
----
print range(1, 10)
----

You should have gotten a list of numbers from one to nine. Can you change the numbers so that they go from one to ten? What happens if you reverse the numbers?

What if you only want odd numbers or even numbers, or if you want to count by fives? You can give `range()` three numbers, and Python will start at the first number and "step" up until it reaches the max number. Take a look at this code:

[source,python]
----
print range(1, 50, 2)
----

Python printed out a list of numbers, starting at one and stopping just short of 50. It only printed the odd numbers, though. How would you change this code to print out the even numbers? What about counting by fives?

You can also change the step number to a negative number. What happens when you run this?

[source,python]
----
print range(10, 0, -1)
----

You get a list of numbers, but this time starting at ten and going down to one! Can you change the code so that you get only even numbers?

==== Range and for loops



==== Skipping to the next item

==== Ending the loop early

=== Conditional loops (while)

==== Infinite loops!

==== Skipping a turn

==== Getting out of a loop early

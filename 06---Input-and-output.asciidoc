== Getting and showing information

So far, we've got Python doing quite a bit! We have it running code multiple times, doing math, and storing information for us. In this chapter, we're going to go over two things that can really make your programs sing: getting information from the user and making what's printed out look nicer.

Until a human can use our program, it's not very useful. After all, how fun would a game be that didn't let you actually control anything? How easy would the game be to play if we couldn't organize the information on the screen? 

=== What you need for this chapter

For this chapter, you should be familiar with the basic data types (integers, strings, and floats), and you should be comfortable with `while` loops and `if` statements. If you need a refresher, go check out the summary videos for those sections!

=== Notes to the mentor

=== Showing information

Making what your computer prints out look nice isn't just about having a pretty program. Organized output is easier to use, and makes it less likely that your user will make mistakes. Think about how hard it would be to use a website where all the information was randomly thrown together. Even a simple page like search results is easier to use when the results are grouped together in a sensible way.

==== The print statement

We've already been using the `print` statement quite a bit, but we haven't really talked about what it does. You can guess, thought, right? `print` tells Python to print some information to the screen. 

[source,python]
----
>>> print "Hello"
Hello
>>> print "Hello", 5
Hello 5
----

So far, we've been using `print` to display one line of information, and we haven't done much to format it. Let's make `print` work a bit harder for us.

==== Formatting and non-printing characters

In Python, we can insert something called *non-printing characters* into a string. These characters tell Python how to format the text when it's printed. They're called non-printing characters because they don't show up like normal characters (for example, 'a', '5', or '!'). 

To add a non-printing character to your string, you use a backslash (\). On your keyboard, that key is usually at the end of the first row of letters. We call this character an *escape*. Using it clues Python in that we want it to do something special.

Escapes are paired with another character (usually a letter) that tell Python exactly what you want to do. Let's insert some tabs into a string by inserting `\t` into a string.

[source,python]
----
my_text = "One\tTwo\tThree"
print my_text
----

Look at what was printed out. Instead of printing out 'One\tTwo\tThree', Python printed out 'One    Two    Three'. Python inserted a tab anywhere where we had a `\t`.

You can also add a line break to a string by inserting `\n` to a string. Run the following code, and note where Python moves to a new line:

[source,python]
----
poem = "Twinkle, twinkle little star\nHow I wonder what you are"
print poem 
----

Because we had a `\n` character in our string, Python knew to move to a new line.

NOTE: Yes, I know that `\n` looks like two characters to us. To Python, though, it's just one character. It's easier to type out `\n` than it is to insert a character that's not on our keyboard.

==== Inserting values

==== Not moving to a new line

=== Getting information

==== Getting numbers

==== Getting text

==== Converting text to numbers

==== Clean up that text!

==== Try this!

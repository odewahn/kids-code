== Getting and showing information

So far, we've got Python doing quite a bit! We have it running code multiple times, doing math, and storing information for us. In this chapter, we're going to go over two things that can really make your programs sing: getting information from the user and making what's printed out look nicer.

Until a human can use our program, it's not very useful. After all, how fun would a game be that didn't let you actually control anything? How easy would the game be to play if we couldn't organize the information on the screen? 

=== What you need for this chapter

For this chapter, you should be familiar with the basic data types (integers, strings, and floats), and you should be comfortable with `while` loops and `if` statements. If you need a refresher, go check out the summary videos for those sections!

=== Notes to the mentor

Okay, things are going to start taking off in this chapter. Something about accepting input tends to make programs really come to life. Before now, the code we've written hasn't been very interactive. Now that we can take in input from a user, we can set up our programs to be more of a framework that can be used over and over again.

We're also going to go over formating text, which is less important in the long run, but in the short run, it can make their programs look nicer. Don't underestimate the pride a student might take in having really nicely formatted screens. In fact, if they decide to take their time, making sure that their data looks nice, let them! We need more developers that care about the front-end!

Finally, I'm sneaking `try` and `except` into this lesson. If you're familiar with exceptions in Python (and most other modern languages!) you know that having naked exception is a bad thing. Catching only certain kinds of errors tend to confuse new coders, though, so I save that for when we start talking about debugging later on. By then, they'll be ready to start talking about all the different kinds of exceptions we can catch!

=== Showing information

Making what your computer prints out look nice isn't just about having a pretty program. Organized output is easier to use, and makes it less likely that your user will make mistakes. Think about how hard it would be to use a website where all the information was randomly thrown together. Even a simple page like search results is easier to use when the results are grouped together in a sensible way.

==== The print statement

We've already been using the `print` statement quite a bit, but we haven't really talked about what it does. You can guess, thought, right? `print` tells Python to print some information to the screen. 

[source,python]
----
>>> print "Hello"
Hello
>>> print "Hello", 5
Hello 5
----

So far, we've been using `print` to display one line of information, and we haven't done much to format it. Let's make `print` work a bit harder for us.

==== Formatting and non-printing characters

In Python, we can insert something called *non-printing characters* into a string. These characters tell Python how to format the text when it's printed. They're called non-printing characters because they don't show up like normal characters (for example, 'a', '5', or '!'). 

To add a non-printing character to your string, you use a backslash (\). On your keyboard, that key is usually at the end of the first row of letters. We call this character an *escape*. Using it clues Python in that we want it to do something special.

Escapes are paired with another character (usually a letter) that tell Python exactly what you want to do. Let's insert some tabs into a string by inserting `\t` into a string.

[source,python]
----
my_text = "One\tTwo\tThree"
print my_text
----

Look at what was printed out. Instead of printing out 'One\tTwo\tThree', Python printed out 'One    Two    Three'. Python inserted a tab anywhere where we had a `\t`.

You can also add a line break to a string by inserting `\n` to a string. Run the following code, and note where Python moves to a new line:

[source,python]
----
poem = "Twinkle, twinkle little star\nHow I wonder what you are"
print poem 
----

Because we had a `\n` character in our string, Python knew to move to a new line.

NOTE: Yes, I know that `\n` looks like two characters to us. To Python, though, it's just one character. It's easier to type out `\n` than it is to insert a character that's not on our keyboard.

==== Not moving to a new line

Another trick you can do with the print statement is adding a comma to the end of the line. This tells Python *not* to move to the next line.

[source,python]
----
print "Hello",
print "World"
----

Why would you want to do this? Sometimes, you need to print out one thing, then do a bunch of calculations and print out something else. Maybe you need to get some information from a website (we'll do that later!) or maybe you just need to do some math. I often use this feature if I'm running through a `for` or `while` loop, and want everything to print out onto one line.

[source,python]
----
>>> for i in range(1, 11):
        print i,
1 2 3 4 5 6 7 8 9 10
----

Had we not added that comma, each number would have been printed on its own line.

==== Inserting values

So far, when we've wanted to combine several values and a print statement, we've used commas or plus signs.

[source,python]
----
>>> print "Hello", 5
Hello 5
>>> print "Hello", "person"
Hello person
----

That's okay if we're printing out something simple, but what if we wanted to print out something more complicated? Let's say we wanted to print out someone's name, age, and grade? We might do something like this:

[source,python]
----
name = "Kendra"
grade = 6
age = 11

print "Hello," name, ". I see you're in grade", 6, "and that you're", age, "years old."
----

That's 'okay', but Python has a way to insert values into strings that's much easier to use. We can use curly brackets ({}) to tell Python where we want to insert information into a string.

NOTE: Curly brackets are generally at the end of the first row of letters on your keyboard, above the square brackets. 

There's a few ways to use the curly brackets. The easiest is to just put them in the string where you want your value inserted, then use `format` to tell Python what values you want inserted.

[source,python]
----
>>> my_string = "Hello, {}, how are you?"
>>> name = "Ahmed"
>>> print my_string.format(name)
Hello, Ahmed, how are you?
----

That's much easier to read than a string that's full of commas or plus signs, right? Even better, you can reuse it! We call strings with curly brackets in them *templates*. Here, we use a template over and over again to say hello to a bunch of people.

[source,python]
----
>>> my_template = "It is {} in the morning."
>>> for time in range(1, 3:
        print my_template.format(name)
It is 1 in the morning.
It is 2 in the morning.
It is 3 in the morning.
----

This is great if you only have one thing to insert. What if you have a really complicated string? You might start getting confused. That's when it's useful to use a keyword with your template. You can put some text in the curly braces, then use that when you format to string to say exactly what goes where.

For example, let's look at our earlier string. We want to insert someone's name, age, and grade level into a string. This is a great place to use keywords!

[source,python]
----
>>> my_name = "Alice"
>>> my_grade = 6
>>> my_age = 11
>>> my_template = "Hello, {name}! I see you're in grade {grade}, and you're {age} years old!"
>>> print my_template.format(name=my_name, grade=my_grade, age=my_age)
Hello, Alice! I see you're in grade 6, and you're 11 years old!
----

This time, we used a keyword in each curly bracket, which makes it much easier to see which value is going where. The value in my_name is going to fill the `name` slot, `my_grade` is going into the `grade` slot, and `my_age` is going to go into the `age` slot.

=== Getting information

Now that we know all kinds of ways to format information when it's printed to the screen, let's talk about how to get information from the user. 

The most basic way to get information from whoever is using your program is by using `input()` and `raw_input()`. Let's start with `input()`.

==== Getting numbers

We can use `input()` to get numbers from our user. Try running this code, entering your age when Python seems to be waiting for something to happen.

[source,python]
----
print "How old are you?"
age = input()
print "You are", age, "years old!"
----

What happened? Python sat there and waited for you to type something, didn't it? Once you typed in your age, Python then printed out how old you are. 

If Python gave you an error, then you probaby entered something that wasn't a number. That's because `input()` can only accept numbers. But what if you wanted to get text? That's when you use `raw_input()`.

==== Getting text

If you use `raw_input()`, then whatever the user enters will be saved in a string. This is a *much* safer option, because it's harder to break. In general, I only use `input()` when I know that I'll be the only person using the program. I trust me! I don't trust anyone else.

Let's look at `raw_input` in action.

[source,python]
----
print "What is your name?"
name = raw_input()
print type(name)
print "Give me a number:"
num = raw_input()
print type(num)
----

Note that even when you gave `raw_input()` a number, Python saved it as a string. Let's use `raw_input()` to get the users age.

[source,python]
----
print "How old are you?"
age = raw_input()
print "You are", age, "years old!"
----

It worked just like before, but this time, if you enter 'eleven' instead of '11', you won't get an error!

==== Add a prompt

So far, we've been printing out a line of text, then getting the user input. We can combine those two lines, however, by adding a prompt to `input()` or `raw_input()`.

To add a prompt, put a string in the parenthesis after `input()` or `raw_input()`. It looks something like this:

[source,python]
----
name = raw_input("What is your name? ")
print "Hi," name
----

This time, rather than getting the input on the next line, we get it on the same line. This looks much nicer, and makes our code a bit easier to maintain. We don't have to worry about keeping those two lines together anymore.

==== Converting text to numbers

Using `raw_input()` is safer than using `input()`, but what if we need a number? In that case, I usually *convert* the string into a number. To do that, we use `float()` or `int()`.

`float()` and `int()` will take a string and try to convert it into a number. `float()` will convert it into a float (a decimal number), and `int()` will convert it into an integer (a whole number). Let's use `int()` to convert the user's age to a integer.

[source,python]
----
age = raw_input("How old are you?")
age = int(age)
print "In five years, you will be", age + 5
----

One problem with `int()` and `float()`, though, is that if you try to convert something that _isn't_ a number, you'll get an error. Run this code, and watch what happens.

[source,python]
----
age = int("five")
----

This is one of the downsides to allowing users to give you input. Sure, your program is way more interactive now, but now the user can break it! 

=== Getting good information from the user

Once you start accepting information from the user, you should also start figuring out how to make sure what they give you is good. Unless you're the only user, you should never trust random input!

==== try / except

One good way to sidestep input that might give you an error is to use `try / except`. A `try / except` statement looks a bit like an `if / else` statement:

[source,python]
----
try:
    code
    code
    code
except:
    code
    code
    code
----

With a `try / except`, Python will run all the code in the `try` block. If it gets an error, Python will skip to the `except` block and run that code. If there are no errors, Python will skip the `except` block.

Try running this code, and note what is printed out.

[source,python]
----
try:
    age = int("five")
    print age + 5
except:
    print "I'm sorry, there was some kind of error"
----

Python printed out a nice message instead of a nasty error, didn't it? Change "five" to "5" and re-run the code. What happens?

This time, because there wasn't an error, Python printed out ten and didn't bother with an error.

NOTE: Unlike an `if` statement, the `except` is mandatory! If you don't want to do anything, just use the `pass` keyword to tell Python to keep on going.

==== Make sure you get good information

`try / except` is great because you don't get errors due to user input anymore, but you still don't have input that will work! Combining a `try / except` with a `while` loop can help make sure that we have good data to work with.

If we want to make sure we get the users age, then we can put the `try / except` statement inside a while loop, and keep going until we get an age we can convert into an integer. First, run the code and try to enter in some bad values before you enter in a good value. 

[source,python]
----
while True:
    age = raw_input("Age? ")
    try:
        age = int(age)
        break
    except:
        print "I'm sorry, I don't like that."
----

What's going on here? Let's take it line by line.

*`while True:`* - Wait! Won't this create an infinite loop?! It will if we don't have a `break` statement somewhere. Happily, we do! You'll see `while True:` quite a bit when looking at other people's code, so it's a good idea to get used to it now!

*`age = raw_input("Age? ")`* - This is pretty easy. We're getting the age from the user and storing it in a string.

*`try:`* - Okay, we're going to try to do something...

*`age = int(age)`* - A-ha! This is the code that might break. If the user enters in anything but a whole number, Python will give us an error.

*`break`* - Here's our break that guarantees that we won't get stuck in an infinite loop. This line will only run _if_ we got good input from the user.

*`except:`* - Here, we start the code that will run if the user gave us a bad value, like a string.

*`print "I'm sorry..."`* - We print out an error message to be nice, then go back to the top of the while loop. We end up asking for the user's age again, and we'll keep doing that until we get some good information from them!

If you use a `while` loop paired with a `try / except` statement, then it becomes much harder for your user to break your program!

==== Try this!

Here's some code that inserts some numbers into a string of text. Can you change the code so that it uses templates and curly brackets?

[source,python]
----
bananas = 5
oranges = 6

print "You have", bananas, "bananas and ", oranges, "oranges."
----
